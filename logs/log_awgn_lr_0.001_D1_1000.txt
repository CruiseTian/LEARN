Namespace(D=1, batch_size=100, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=25, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Namespace(D=1, batch_size=100, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=25, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Channel_AE(
  (enc): ENC(
    (enc_rnn): GRU(1, 25, num_layers=2, batch_first=True)
    (enc_linear): Linear(in_features=25, out_features=3, bias=True)
  )
  (dec): DEC(
    (dropout): Dropout(p=0.0, inplace=False)
    (embedding): Embedding(1, 100)
    (attn): Linear(in_features=200, out_features=1, bias=True)
    (attn_combine): Linear(in_features=200, out_features=100, bias=True)
    (dec1_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec2_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec_outputs): Linear(in_features=200, out_features=1, bias=True)
  )
)
Namespace(D=1, batch_size=100, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=25, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Channel_AE(
  (enc): ENC(
    (enc_rnn): GRU(1, 25, num_layers=2, batch_first=True)
    (enc_linear): Linear(in_features=25, out_features=3, bias=True)
  )
  (dec): DEC(
    (dropout): Dropout(p=0.0, inplace=False)
    (embedding): Embedding(1, 100)
    (attn): Linear(in_features=200, out_features=1, bias=True)
    (attn_combine): Linear(in_features=200, out_features=100, bias=True)
    (dec1_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec2_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec_outputs): Linear(in_features=200, out_features=1, bias=True)
  )
)
shape of received:  torch.Size([100, 100, 3])
Namespace(D=1, batch_size=100, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=25, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Channel_AE(
  (enc): ENC(
    (enc_rnn): GRU(1, 25, num_layers=2, batch_first=True)
    (enc_linear): Linear(in_features=25, out_features=3, bias=True)
  )
  (dec): DEC(
    (dropout): Dropout(p=0.0, inplace=False)
    (embedding): Embedding(1, 100)
    (attn): Linear(in_features=200, out_features=1, bias=True)
    (attn_combine): Linear(in_features=200, out_features=100, bias=True)
    (dec1_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec2_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec_outputs): Linear(in_features=200, out_features=1, bias=True)
  )
)
shape of received:  torch.Size([100, 100, 3])
shape of embedded:  torch.Size([1, 1, 1000000])
Namespace(D=1, batch_size=100, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=25, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Channel_AE(
  (enc): ENC(
    (enc_rnn): GRU(1, 25, num_layers=2, batch_first=True)
    (enc_linear): Linear(in_features=25, out_features=3, bias=True)
  )
  (dec): DEC(
    (dropout): Dropout(p=0.0, inplace=False)
    (embedding): Embedding(1, 100)
    (attn): Linear(in_features=200, out_features=1, bias=True)
    (attn_combine): Linear(in_features=200, out_features=100, bias=True)
    (dec1_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec2_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec_outputs): Linear(in_features=200, out_features=1, bias=True)
  )
)
shape of received:  torch.Size([100, 100, 3])
shape of embedded:  torch.Size([1, 1, 1000000])
shape of hidden:  torch.Size([2, 100, 25])
Namespace(D=1, batch_size=100, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=25, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Channel_AE(
  (enc): ENC(
    (enc_rnn): GRU(1, 25, num_layers=2, batch_first=True)
    (enc_linear): Linear(in_features=25, out_features=3, bias=True)
  )
  (dec): DEC(
    (dropout): Dropout(p=0.0, inplace=False)
    (embedding): Embedding(1, 100)
    (attn): Linear(in_features=200, out_features=100, bias=True)
    (attn_combine): Linear(in_features=200, out_features=100, bias=True)
    (dec1_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec2_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec_outputs): Linear(in_features=200, out_features=1, bias=True)
  )
)
shape of received:  torch.Size([100, 100, 3])
shape of embedded:  torch.Size([1, 1, 1000000])
shape of hidden:  torch.Size([2, 100, 25])
Namespace(D=1, batch_size=100, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=25, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Namespace(D=1, batch_size=100, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=25, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Channel_AE(
  (enc): ENC(
    (enc_rnn): GRU(1, 25, num_layers=2, batch_first=True)
    (enc_linear): Linear(in_features=25, out_features=3, bias=True)
  )
  (dec): DEC(
    (dropout): Dropout(p=0.0, inplace=False)
    (embedding): Embedding(1, 100)
    (attn): Linear(in_features=200, out_features=100, bias=True)
    (attn_combine): Linear(in_features=200, out_features=100, bias=True)
    (dec1_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec2_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec_outputs): Linear(in_features=100, out_features=1, bias=True)
  )
)
shape of received:  torch.Size([100, 100, 3])
shape of embedded:  torch.Size([100, 100, 100])
shape of hidden:  torch.Size([2, 100, 25])
Namespace(D=1, batch_size=50, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=25, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Channel_AE(
  (enc): ENC(
    (enc_rnn): GRU(1, 25, num_layers=2, batch_first=True)
    (enc_linear): Linear(in_features=25, out_features=3, bias=True)
  )
  (dec): DEC(
    (dropout): Dropout(p=0.0, inplace=False)
    (embedding): Embedding(1, 100)
    (attn): Linear(in_features=200, out_features=100, bias=True)
    (attn_combine): Linear(in_features=200, out_features=100, bias=True)
    (dec1_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec2_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec_outputs): Linear(in_features=100, out_features=1, bias=True)
  )
)
shape of received:  torch.Size([50, 100, 3])
shape of embedded:  torch.Size([100, 100, 50])
shape of hidden:  torch.Size([2, 50, 25])
Namespace(D=1, batch_size=100, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=50, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=50, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Channel_AE(
  (enc): ENC(
    (enc_rnn): GRU(1, 50, num_layers=2, batch_first=True)
    (enc_linear): Linear(in_features=50, out_features=3, bias=True)
  )
  (dec): DEC(
    (dropout): Dropout(p=0.0, inplace=False)
    (attn): Linear(in_features=100, out_features=100, bias=True)
    (attn_combine): Linear(in_features=100, out_features=50, bias=True)
    (dec1_rnns): GRU(3, 50, num_layers=2, batch_first=True)
    (dec2_rnns): GRU(3, 50, num_layers=2, batch_first=True)
    (dec_outputs): Linear(in_features=50, out_features=1, bias=True)
  )
)
Namespace(D=1, batch_size=100, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=100, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Channel_AE(
  (enc): ENC(
    (enc_rnn): GRU(1, 100, num_layers=2, batch_first=True)
    (enc_linear): Linear(in_features=100, out_features=3, bias=True)
  )
  (dec): DEC(
    (dropout): Dropout(p=0.0, inplace=False)
    (attn): Linear(in_features=200, out_features=100, bias=True)
    (attn_combine): Linear(in_features=200, out_features=100, bias=True)
    (dec1_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec2_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec_outputs): Linear(in_features=100, out_features=1, bias=True)
  )
)
Namespace(D=1, batch_size=100, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=100, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Channel_AE(
  (enc): ENC(
    (enc_rnn): GRU(1, 100, num_layers=2, batch_first=True)
    (enc_linear): Linear(in_features=100, out_features=3, bias=True)
  )
  (dec): DEC(
    (dropout): Dropout(p=0.0, inplace=False)
    (attn): Linear(in_features=200, out_features=100, bias=True)
    (attn_combine): Linear(in_features=200, out_features=100, bias=True)
    (dec1_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec2_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec_outputs): Linear(in_features=100, out_features=1, bias=True)
  )
)
shape of received:  torch.Size([100, 100, 3])
Namespace(D=1, batch_size=100, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=100, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Channel_AE(
  (enc): ENC(
    (enc_rnn): GRU(1, 100, num_layers=2, batch_first=True)
    (enc_linear): Linear(in_features=100, out_features=3, bias=True)
  )
  (dec): DEC(
    (dropout): Dropout(p=0.0, inplace=False)
    (attn): Linear(in_features=200, out_features=100, bias=True)
    (attn_combine): Linear(in_features=200, out_features=100, bias=True)
    (dec1_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec2_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec_outputs): Linear(in_features=100, out_features=1, bias=True)
  )
)
Namespace(D=1, batch_size=100, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=100, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Channel_AE(
  (enc): ENC(
    (enc_rnn): GRU(1, 100, num_layers=2, batch_first=True)
    (enc_linear): Linear(in_features=100, out_features=3, bias=True)
  )
  (dec): DEC(
    (dropout): Dropout(p=0.0, inplace=False)
    (attn): Linear(in_features=200, out_features=100, bias=True)
    (attn_combine): Linear(in_features=200, out_features=100, bias=True)
    (dec1_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec2_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec_outputs): Linear(in_features=100, out_features=1, bias=True)
  )
)
<class 'torch.Tensor'>
Namespace(D=1, batch_size=100, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=100, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Channel_AE(
  (enc): ENC(
    (enc_rnn): GRU(1, 100, num_layers=2, batch_first=True)
    (enc_linear): Linear(in_features=100, out_features=3, bias=True)
  )
  (dec): DEC(
    (dropout): Dropout(p=0.0, inplace=False)
    (attn): Linear(in_features=200, out_features=100, bias=True)
    (attn_combine): Linear(in_features=200, out_features=100, bias=True)
    (dec1_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec2_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec_outputs): Linear(in_features=100, out_features=1, bias=True)
  )
)
<class 'torch.Tensor'>
Namespace(D=1, batch_size=100, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=100, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Channel_AE(
  (enc): ENC(
    (enc_rnn): GRU(1, 100, num_layers=2, batch_first=True)
    (enc_linear): Linear(in_features=100, out_features=3, bias=True)
  )
  (dec): DEC(
    (dropout): Dropout(p=0.0, inplace=False)
    (attn): Linear(in_features=200, out_features=100, bias=True)
    (attn_combine): Linear(in_features=200, out_features=100, bias=True)
    (dec1_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec2_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec_outputs): Linear(in_features=100, out_features=1, bias=True)
  )
)
<class 'torch.Tensor'>
shape of received:  torch.Size([100, 100, 3])
shape of hidden:  torch.Size([100, 2, 100, 100])
Namespace(D=1, batch_size=100, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=100, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Channel_AE(
  (enc): ENC(
    (enc_rnn): GRU(1, 100, num_layers=2, batch_first=True)
    (enc_linear): Linear(in_features=100, out_features=3, bias=True)
  )
  (dec): DEC(
    (dropout): Dropout(p=0.0, inplace=False)
    (attn): Linear(in_features=200, out_features=100, bias=True)
    (attn_combine): Linear(in_features=200, out_features=100, bias=True)
    (dec1_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec2_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec_outputs): Linear(in_features=100, out_features=1, bias=True)
  )
)
shape of received:  torch.Size([100, 100, 3])
shape of hidden:  torch.Size([100, 2, 100, 100])
Namespace(D=1, batch_size=50, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=100, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Channel_AE(
  (enc): ENC(
    (enc_rnn): GRU(1, 100, num_layers=2, batch_first=True)
    (enc_linear): Linear(in_features=100, out_features=3, bias=True)
  )
  (dec): DEC(
    (dropout): Dropout(p=0.0, inplace=False)
    (attn): Linear(in_features=200, out_features=100, bias=True)
    (attn_combine): Linear(in_features=200, out_features=100, bias=True)
    (dec1_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec2_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec_outputs): Linear(in_features=100, out_features=1, bias=True)
  )
)
shape of received:  torch.Size([50, 100, 3])
shape of hidden:  torch.Size([100, 2, 50, 100])
Namespace(D=1, batch_size=50, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=100, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Channel_AE(
  (enc): ENC(
    (enc_rnn): GRU(1, 100, num_layers=2, batch_first=True)
    (enc_linear): Linear(in_features=100, out_features=3, bias=True)
  )
  (dec): DEC(
    (dropout): Dropout(p=0.0, inplace=False)
    (attn): Linear(in_features=200, out_features=100, bias=True)
    (attn_combine): Linear(in_features=200, out_features=100, bias=True)
    (dec1_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec2_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec_outputs): Linear(in_features=100, out_features=1, bias=True)
  )
)
shape of received:  torch.Size([50, 100, 3])
shape of hidden:  torch.Size([100, 2, 50, 100])
Namespace(D=1, batch_size=50, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=100, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Channel_AE(
  (enc): ENC(
    (enc_rnn): GRU(1, 100, num_layers=2, batch_first=True)
    (enc_linear): Linear(in_features=100, out_features=3, bias=True)
  )
  (dec): DEC(
    (dropout): Dropout(p=0.0, inplace=False)
    (attn): Linear(in_features=200, out_features=100, bias=True)
    (attn_combine): Linear(in_features=200, out_features=100, bias=True)
    (dec1_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec2_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec_outputs): Linear(in_features=100, out_features=1, bias=True)
  )
)
shape of received:  torch.Size([50, 100, 3])
shape of hidden:  torch.Size([100, 2, 50, 100])
dec hidden shape:  torch.Size([2, 50, 100])
Namespace(D=1, batch_size=50, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=100, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Namespace(D=1, batch_size=50, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=100, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Namespace(D=1, batch_size=50, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=100, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Channel_AE(
  (enc): ENC(
    (enc_rnn): GRU(1, 100, num_layers=2, batch_first=True)
    (enc_linear): Linear(in_features=100, out_features=3, bias=True)
    (fc): Linear(in_features=100, out_features=100, bias=True)
  )
  (dec): DEC(
    (dropout): Dropout(p=0.0, inplace=False)
    (attention): Attention(
      (attn): Linear(in_features=300, out_features=100, bias=False)
      (v): Linear(in_features=100, out_features=1, bias=False)
    )
    (dec1_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec2_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec_outputs): Linear(in_features=100, out_features=1, bias=True)
  )
)
Namespace(D=1, batch_size=50, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=100, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Channel_AE(
  (enc): ENC(
    (enc_rnn): GRU(1, 100, num_layers=2, batch_first=True)
    (enc_linear): Linear(in_features=100, out_features=3, bias=True)
    (fc): Linear(in_features=100, out_features=100, bias=True)
  )
  (dec): DEC(
    (dropout): Dropout(p=0.0, inplace=False)
    (attention): Attention(
      (attn): Linear(in_features=300, out_features=100, bias=False)
      (v): Linear(in_features=100, out_features=1, bias=False)
    )
    (dec1_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec2_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec_outputs): Linear(in_features=100, out_features=1, bias=True)
  )
)
shape of s:  torch.Size([50, 100])
shape of enc_output:  torch.Size([50, 100, 100])
shape of received:  torch.Size([50, 100, 3])
Namespace(D=1, batch_size=50, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=100, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Channel_AE(
  (enc): ENC(
    (enc_rnn): GRU(1, 100, num_layers=2, batch_first=True)
    (enc_linear): Linear(in_features=100, out_features=3, bias=True)
    (fc): Linear(in_features=100, out_features=100, bias=True)
  )
  (dec): DEC(
    (dropout): Dropout(p=0.0, inplace=False)
    (attention): Attention(
      (attn): Linear(in_features=300, out_features=100, bias=False)
      (v): Linear(in_features=100, out_features=1, bias=False)
    )
    (dec1_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec2_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec_outputs): Linear(in_features=100, out_features=1, bias=True)
  )
)
shape of s:  torch.Size([50, 100])
shape of enc_output:  torch.Size([50, 100, 100])
shape of received:  torch.Size([50, 100, 3])
shape of dec_input:  torch.Size([50, 1, 3])
Namespace(D=1, batch_size=50, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=100, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Channel_AE(
  (enc): ENC(
    (enc_rnn): GRU(1, 100, num_layers=2, batch_first=True)
    (enc_linear): Linear(in_features=100, out_features=3, bias=True)
    (fc): Linear(in_features=100, out_features=100, bias=True)
  )
  (dec): DEC(
    (dropout): Dropout(p=0.0, inplace=False)
    (attention): Attention(
      (attn): Linear(in_features=300, out_features=100, bias=False)
      (v): Linear(in_features=100, out_features=1, bias=False)
    )
    (dec1_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec2_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec_outputs): Linear(in_features=100, out_features=1, bias=True)
  )
)
shape of s:  torch.Size([2, 50, 100])
shape of enc_output:  torch.Size([50, 100, 100])
shape of received:  torch.Size([50, 100, 3])
shape of dec_input:  torch.Size([50, 1, 3])
Namespace(D=1, batch_size=50, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=100, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Channel_AE(
  (enc): ENC(
    (enc_rnn): GRU(1, 100, num_layers=2, batch_first=True)
    (enc_linear): Linear(in_features=100, out_features=3, bias=True)
    (fc): Linear(in_features=100, out_features=100, bias=True)
  )
  (dec): DEC(
    (dropout): Dropout(p=0.0, inplace=False)
    (attention): Attention(
      (attn): Linear(in_features=200, out_features=100, bias=False)
      (v): Linear(in_features=100, out_features=1, bias=False)
    )
    (dec1_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec2_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec_outputs): Linear(in_features=100, out_features=1, bias=True)
  )
)
shape of s:  torch.Size([2, 50, 100])
shape of enc_output:  torch.Size([50, 100, 100])
shape of received:  torch.Size([50, 100, 3])
shape of dec_input:  torch.Size([50, 1, 3])
Namespace(D=1, batch_size=50, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=100, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Channel_AE(
  (enc): ENC(
    (enc_rnn): GRU(1, 100, num_layers=2, batch_first=True)
    (enc_linear): Linear(in_features=100, out_features=3, bias=True)
    (fc): Linear(in_features=100, out_features=100, bias=True)
  )
  (dec): DEC(
    (dropout): Dropout(p=0.0, inplace=False)
    (attention): Attention(
      (attn): Linear(in_features=200, out_features=100, bias=False)
      (v): Linear(in_features=100, out_features=1, bias=False)
    )
    (dec1_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec2_rnns): GRU(3, 100, num_layers=2, batch_first=True)
    (dec_outputs): Linear(in_features=100, out_features=1, bias=True)
  )
)
shape of s:  torch.Size([2, 50, 100])
shape of enc_output:  torch.Size([50, 100, 100])
shape of received:  torch.Size([50, 100, 3])
shape of dec_input:  torch.Size([50, 1, 3])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
Namespace(D=1, batch_size=50, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=100, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Namespace(D=1, batch_size=50, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=100, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Namespace(D=1, batch_size=50, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=100, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Channel_AE(
  (enc): ENC(
    (enc_rnn): GRU(1, 100, num_layers=2, batch_first=True)
    (enc_linear): Linear(in_features=100, out_features=3, bias=True)
    (fc): Linear(in_features=100, out_features=100, bias=True)
  )
  (dec): DEC(
    (dropout): Dropout(p=0.0, inplace=False)
    (attention): Attention(
      (attn): Linear(in_features=200, out_features=100, bias=False)
      (v): Linear(in_features=100, out_features=1, bias=False)
    )
    (dec1_rnns): GRU(103, 100, num_layers=2, batch_first=True)
    (dec2_rnns): GRU(103, 100, num_layers=2, batch_first=True)
    (dec_outputs): Linear(in_features=200, out_features=1, bias=True)
  )
)
Namespace(D=1, batch_size=50, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=100, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Channel_AE(
  (enc): ENC(
    (enc_rnn): GRU(1, 100, num_layers=2, batch_first=True)
    (enc_linear): Linear(in_features=100, out_features=3, bias=True)
    (fc): Linear(in_features=100, out_features=100, bias=True)
  )
  (dec): DEC(
    (dropout): Dropout(p=0.0, inplace=False)
    (attention): Attention(
      (attn): Linear(in_features=200, out_features=100, bias=False)
      (v): Linear(in_features=100, out_features=1, bias=False)
    )
    (dec1_rnns): GRU(103, 100, num_layers=2, batch_first=True)
    (dec2_rnns): GRU(103, 100, num_layers=2, batch_first=True)
    (dec_outputs): Linear(in_features=200, out_features=1, bias=True)
  )
)
shape of s:  torch.Size([2, 50, 100])
shape of enc_output:  torch.Size([50, 100, 100])
shape of received:  torch.Size([50, 100, 3])
shape of dec_input:  torch.Size([50, 1, 3])
Namespace(D=1, batch_size=50, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=100, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Channel_AE(
  (enc): ENC(
    (enc_rnn): GRU(1, 100, num_layers=2, batch_first=True)
    (enc_linear): Linear(in_features=100, out_features=3, bias=True)
    (fc): Linear(in_features=100, out_features=100, bias=True)
  )
  (dec): DEC(
    (dropout): Dropout(p=0.0, inplace=False)
    (attention): Attention(
      (attn): Linear(in_features=200, out_features=100, bias=False)
      (v): Linear(in_features=100, out_features=1, bias=False)
    )
    (dec1_rnns): GRU(103, 100, num_layers=2, batch_first=True)
    (dec2_rnns): GRU(103, 100, num_layers=2, batch_first=True)
    (dec_outputs): Linear(in_features=200, out_features=1, bias=True)
  )
)
shape of s:  torch.Size([2, 50, 100])
shape of enc_output:  torch.Size([50, 100, 100])
shape of received:  torch.Size([50, 100, 3])
shape of dec_input:  torch.Size([50, 1, 3])
Namespace(D=1, batch_size=50, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=100, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Channel_AE(
  (enc): ENC(
    (enc_rnn): GRU(1, 100, num_layers=2, batch_first=True)
    (enc_linear): Linear(in_features=100, out_features=3, bias=True)
    (fc): Linear(in_features=100, out_features=100, bias=True)
  )
  (dec): DEC(
    (dropout): Dropout(p=0.0, inplace=False)
    (attention): Attention(
      (attn): Linear(in_features=200, out_features=100, bias=False)
      (v): Linear(in_features=100, out_features=1, bias=False)
    )
    (dec1_rnns): GRU(103, 100, num_layers=2, batch_first=True)
    (dec2_rnns): GRU(103, 100, num_layers=2, batch_first=True)
    (dec_outputs): Linear(in_features=200, out_features=1, bias=True)
  )
)
shape of s:  torch.Size([50, 100])
shape of hidden1:  torch.Size([2, 50, 100])
shape of enc_output:  torch.Size([50, 100, 100])
shape of received:  torch.Size([50, 100, 3])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([1, 50, 100])
Namespace(D=1, batch_size=50, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=100, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Channel_AE(
  (enc): ENC(
    (enc_rnn): GRU(1, 100, num_layers=2, batch_first=True)
    (enc_linear): Linear(in_features=100, out_features=3, bias=True)
    (fc): Linear(in_features=100, out_features=100, bias=True)
  )
  (dec): DEC(
    (dropout): Dropout(p=0.0, inplace=False)
    (attention): Attention(
      (attn): Linear(in_features=200, out_features=100, bias=False)
      (v): Linear(in_features=100, out_features=1, bias=False)
    )
    (dec1_rnns): GRU(103, 100, num_layers=2, batch_first=True)
    (dec2_rnns): GRU(103, 100, num_layers=2, batch_first=True)
    (dec_outputs): Linear(in_features=200, out_features=1, bias=True)
  )
)
shape of s:  torch.Size([50, 100])
shape of hidden1:  torch.Size([2, 50, 100])
shape of enc_output:  torch.Size([50, 100, 100])
shape of received:  torch.Size([50, 100, 3])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
shape of a:  torch.Size([50, 1, 100])
shape of c:  torch.Size([50, 1, 100])
shape of rnn_input:  torch.Size([50, 1, 103])
dec output shape:  torch.Size([50, 1, 100])
dec hidden shape:  torch.Size([2, 50, 100])
shape of dec_input:  torch.Size([50, 1, 3])
shape of hidden:  torch.Size([50, 100])
Namespace(D=1, batch_size=100, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=25, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Channel_AE(
  (enc): ENC(
    (enc_rnn): GRU(1, 25, num_layers=2, batch_first=True)
    (enc_linear): Linear(in_features=25, out_features=3, bias=True)
    (fc): Linear(in_features=25, out_features=100, bias=True)
  )
  (dec): DEC(
    (dropout): Dropout(p=0.0, inplace=False)
    (attention): Attention(
      (attn): Linear(in_features=125, out_features=100, bias=False)
      (v): Linear(in_features=100, out_features=1, bias=False)
    )
    (dec1_rnns): GRU(28, 100, num_layers=2, batch_first=True)
    (dec2_rnns): GRU(28, 100, num_layers=2, batch_first=True)
    (dec_outputs): Linear(in_features=200, out_features=1, bias=True)
  )
)
Namespace(D=1, batch_size=100, block_len=100, block_len_high=200, block_len_low=10, channel='awgn', code_rate_k=1, code_rate_n=3, dec_act='linear', dec_lr=0.001, dec_num_layer=5, dec_num_unit=100, dec_rnn='gru', dropout=0.0, enc_act='elu', enc_clipping='both', enc_grad_limit=0.01, enc_lr=0.001, enc_num_layer=2, enc_num_unit=25, enc_quantize_level=2, enc_rnn='gru', enc_truncate_limit=0, enc_value_limit=1.0, init_nw_weight='default', is_variable_block_len=False, no_code_norm=False, no_cuda=False, num_block=1000, num_epoch=1, num_train_dec=5, num_train_enc=1, optimizer='adam', precompute_norm_stats=False, print_pos_ber=False, print_pos_power=False, print_test_traj=False, radar_power=5.0, radar_prob=0.05, rec_quantize=False, snr_points=12, snr_test_end=4.0, snr_test_start=-1.5, test_ratio=1, train_channel_mode='block_norm', train_dec_channel_high=2.0, train_dec_channel_low=-1.5, train_enc_channel_high=1.0, train_enc_channel_low=1.0, vv=5)
use_cuda:  True
Channel_AE(
  (enc): ENC(
    (enc_rnn): GRU(1, 25, num_layers=2, batch_first=True)
    (enc_linear): Linear(in_features=25, out_features=3, bias=True)
    (fc): Linear(in_features=25, out_features=100, bias=True)
  )
  (dec): DEC(
    (dropout): Dropout(p=0.0, inplace=False)
    (attention): Attention(
      (attn): Linear(in_features=125, out_features=100, bias=False)
      (v): Linear(in_features=100, out_features=1, bias=False)
    )
    (dec1_rnns): GRU(28, 100, num_layers=2, batch_first=True)
    (dec2_rnns): GRU(28, 100, num_layers=2, batch_first=True)
    (dec_outputs): Linear(in_features=200, out_features=1, bias=True)
  )
)
